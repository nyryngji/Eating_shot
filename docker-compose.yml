services:
  djangoapp:
    build: djangoapp
    command: uvicorn core.asgi:application --host 0.0.0.0 --port 8000
    volumes:
      - static_volume:/app/static
      - ./djangoapp/db.sqlite3:/app/db.sqlite3
    expose:
      - "8000"
    depends_on:
      - nginx
      - zookeeper
      - kafka
    networks:
      - internal
  #    healthcheck:
  #      test: [ "CMD", "curl", "-f", "http://djangoapp:8000" ]

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    restart: on-failure
    volumes:
      - static_volume:/usr/share/nginx/html/static
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - internal
  #    depends_on:
  #      djangoapp:
  #        condition: service_healthy

  inferenceapp:
    build: inference
    ports:
      - "8099:8099"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    networks:
      - internal

  kafka-consumer:
    build: ./djangoapp
    command: [ "sh", "-c", "sleep 5 && python run_consumer.py" ] # Introduce a delay
    volumes:
      - ./djangoapp:/app
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - PYTHONPATH=/app
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - internal
  #      djangoapp:
  #        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - internal

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "nc", "-z", "kafka", "9092" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - internal

  logstash:
    image: logstash:7.17.1
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - elk

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.10.0
    container_name: filebeat
    user: root
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    depends_on:
      - logstash
    networks:
      - elk

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:7.10.0
    container_name: metricbeat
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
      - ./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
    environment:
      - "STRICT_PERMS=false"
    networks:
      - elk
    depends_on:
      - elasticsearch

  #  packetbeat:
  #    image: docker.elastic.co/beats/packetbeat:7.10.0
  #    container_name: packetbeat
  #    user: root
  #    network_mode: host
  #    cap_add:
  #      - NET_ADMIN
  #      - NET_RAW
  #    volumes:
  #      - ./packetbeat.yml:/usr/share/packetbeat/packetbeat.yml:ro
  #    depends_on:
  #      - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - elk

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - elk

#  prometheus:
#    image: prom/prometheus
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"
#    networks:
#      - monitoring
#
#  grafana:
#    image: grafana/grafana
#    ports:
#      - "3000:3000"
#    networks:
#      - monitoring
volumes:
  esdata:
    driver: local
  static_volume:

networks:
  elk:
    driver: bridge
  internal:
