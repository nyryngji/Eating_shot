"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
# from celery.schedules import crontab

if not os.environ.get("DJANGO_ENV") == "production":
    from dotenv import load_dotenv

    load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get("DJANGO_ENV") == "production":
    DEBUG = False
    ALLOWED_HOSTS = [
        "localhost",
        "eatingshot.jonngwanma.de",
    ]
    CSRF_TRUSTED_ORIGINS = [  # for django 4.0 and above
        "https://eatingshot.jonngwanma.de",
        "https://localhost:8080",
    ]
else:
    DEBUG = True
    ALLOWED_HOSTS = ["localhost", "dekaram.tail25a21e.ts.net"]
    CSRF_TRUSTED_ORIGINS = [
        "http://localhost:8000",
        "https://dekaram.tail25a21e.ts.net",
    ]


if DEBUG:
    INFERENCE_SERVER_URL = "http://localhost:8099"  # the dummy fastapi
else:
    INFERENCE_SERVER_URL = "http://inferenceapp:8099"  # the dummy fastapi server

# Application definition

WSGI_APPLICATION = "core.wsgi.application"

ASGI_APPLICATION = "core.asgi.application"

INSTALLED_APPS = [
    # 'django.contrib.admin', # disable admin pages for production!
    "daphne",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    # "rest_framework.authtoken",
    "rest_framework_simplejwt.token_blacklist",
    "drf_spectacular",
    # "widget_tweaks",
    "django_eventstream",
    # "channels",
    "django_celery_beat",
    "django_celery_results",
    "django_resized",
    "pwa",
    "users.apps.UsersConfig",
    "ai_workload.apps.AiWorkloadConfig",
    "webapp.apps.WebappConfig",
    "events.apps.EventsConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    #
    "core.middleware.ActivityLoggingMiddleware",
]
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # "rest_framework.authentication.TokenAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
        "django_eventstream.renderers.SSEEventRenderer",
        "django_eventstream.renderers.BrowsableAPIEventStreamRenderer",
        # Add other renderers as needed
    ],
}
SPECTACULAR_SETTINGS = {
    "TITLE": "Project EatingShot's API",
    "DESCRIPTION": "디스크 립션",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    # OTHER SETTINGS
    "COMPONENT_SPLIT_REQUEST": True,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=14),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
}

EVENTSTREAM_REDIS = {
    "host": "localhost" if DEBUG else "redis",
    "port": 6379,
    "db": 0,
}
EVENTSTREAM_STORAGE_CLASS = "django_eventstream.storage.DjangoModelStorage"

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# django-pwa settings

# PWA_APP_DEBUG_MODE = False

PWA_APP_NAME = "EatingShot"
PWA_APP_DESCRIPTION = "EatingShot is a web application for food recognition."
PWA_APP_THEME_COLOR = "#0A0302"
PWA_APP_BACKGROUND_COLOR = "#ffffff"
PWA_APP_DISPLAY = "standalone"
PWA_APP_SCOPE = "/"
PWA_APP_ORIENTATION = "any"
PWA_APP_START_URL = "/"
PWA_APP_STATUS_BAR_COLOR = "default"
PWA_SERVICE_WORKER_PATH = os.path.join(BASE_DIR, "static/js", "serviceworker.js")
PWA_APP_ICONS = [{"src": "/static/img/icons/icon-384x384.png", "sizes": "384x384"}]
PWA_APP_ICONS_APPLE = [
    {"src": "/static/img/icons/icon-384x384.png", "sizes": "384x384"}
]
PWA_APP_SPLASH_SCREEN = [
    {
        "src": "/static/img/icons/icon-384x384.png",
        "media": "(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)",
    }
]
PWA_APP_DIR = "webapp"
PWA_APP_LANG = "ko-KR"
# PWA_APP_SHORTCUTS = [
#     {
#         "name": "Shortcut",
#         "url": "/target",
#         "description": "Shortcut to a page in my application",
#     }
# ]
PWA_APP_SCREENSHOTS = [
    {
        "src": "/static/img/icons/icon-384x384.png",
        # "sizes": "750x1334",
        "sizes": "384x384",
        "type": "image/png",
    }
]


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("POSTGRES_DB"),
            "USER": os.environ.get("POSTGRES_USER"),
            "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
            "HOST": "db",
            "PORT": 5432,
        }
    }

LOGIN_URL = "login"
# LOGIN_REDIRECT_URL = "home"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "users.CustomUser"

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
MEDIA_URL = "/photos/"
MEDIA_ROOT = BASE_DIR / "photos"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CELERY_RESULT_BACKEND = "django-db"
CELERY_RESULT_EXTENDED = True

if os.environ.get("DJANGO_ENV") == "production":
    # KAFKA_BOOTSTRAP_SERVERS = "kafka:29092"  # for docker
    CELERY_BROKER_URL = "redis://redis:6379/0"  # for docker
else:
    # KAFKA_BOOTSTRAP_SERVERS = "localhost:29092"
    # PLAINTEXT_HOST://kafka:29092 at docker-compose.yml too!!
    CELERY_BROKER_URL = "redis://localhost:6379/0"

# run celery beat to do this
# CELERY_BEAT_SCHEDULE = {
#     "sync-nutrition-data": {
#         "task": "your_app.tasks.sync_nutrition_data",
#         "schedule": crontab(hour="*/6"),  # Run every 6 hours
#     },
# }

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,  # Prevent propagation to avoid double logging
        },
    },
}
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "handlers": {
#         "file": {
#             "level": "INFO",
#             "class": "logging.FileHandler",
#             "filename": "/var/log/django/django.log",
#         },
#         "logstash": {
#             "level": "INFO",
#             "class": "logstash.TCPLogstashHandler",
#             "host": "logstash",  # Logstash container name
#             "port": 5000,  # Port Logstash is listening on
#             "version": 1,
#         },
#     },
#     "loggers": {
#         "django": {
#             "handlers": ["file", "logstash"],
#             "level": "INFO",
#             "propagate": True,
#         },
#     },
# }
